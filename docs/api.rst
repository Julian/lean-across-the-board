=============
API Reference
=============

``chess.board``
---------------

.. module:: chess.board


.. definition:: chess.board

    A board is axiomatized as a set of indexable (ergo distinguishable) pieces
    which are placed on distinct squares of a `playfield`.

.. definition:: chess.board.board_repr

    A board's representation is just the concatentation of the representations
    of the `pieces` and `contents` via `board_repr_pieces` and `board_repr_contents`,
    respectively, with newlines inserted for clarity.

.. definition:: chess.board.board_repr_contents

    A board's `contents` can be represented by reducing the board according to
    the indexed vector at `pieces`, and placing the pieces on the `playfield`.
    We override the default `option K` representation by using `option_wrap`,
    and supply an underscore to represent empty positions.

.. definition:: chess.board.board_repr_instance



.. definition:: chess.board.board_repr_pieces

    A board's `pieces` is a "vector", so `vec_repr` is used to represent it.

.. definition:: chess.board.has_equiv



.. definition:: chess.board.has_mem



.. definition:: chess.board.height

    The height of the board.

.. definition:: chess.board.reduce

    The state of the board, where pieces of the same type are equivalent

.. definition:: chess.board.width

    The width of the board.

.. definition:: chess.option_wrap

    Construct an `option_wrapper` term from a provided `option K` and the `string`
    that will override the `has_repr.repr` for `none`.

.. definition:: chess.option_wrapper

    An auxiliary wrapper for `option K` that allows for overriding the `has_repr` instance
    for `option`, and rather, output just the value in the `some` and a custom provided
    `string` for `none`.

.. definition:: chess.wrapped_option_repr



``chess.move``
--------------

.. module:: chess.move


.. definition:: chess.move

    A move is a (distinct) start and end square whose start square is
    occupied and whose end square is not.

    (Captures are not implemented yet.)

.. definition:: chess.move.after_occupied_end

    End squares are occupied after a move.

.. definition:: chess.move.after_unoccupied_start

    Start squares are unoccupied after a move.

.. definition:: chess.move.before_after_same

    Other squares are unchanged after a move.

.. definition:: chess.move.before_occupied_start

    Start squares are occupied before a move.

.. definition:: chess.move.before_unoccupied_end

    End squares are unoccupied before a move.

.. definition:: chess.move.no_superimpose

    Pieces do not become superimposed after a move.

.. definition:: chess.move.perform_move

    A valid `move` on a `board` retains a valid board state.

.. definition:: chess.move.piece

    The piece that is being moved.

.. definition:: chess.move.retains_pieces

    Pieces do not disappear after a move.

.. definition:: chess.move.start_square_is_some



.. definition:: chess.split_eq



``chess.piece``
---------------

.. module:: chess.piece


.. definition:: chess.black_bishop



.. definition:: chess.black_king



.. definition:: chess.black_knight



.. definition:: chess.black_pawn



.. definition:: chess.black_queen



.. definition:: chess.black_rook



.. definition:: chess.color



.. definition:: chess.color.decidable_eq



.. definition:: chess.colored_pieces



.. definition:: chess.colored_pieces.decidable_eq



.. definition:: chess.has_repr



.. definition:: chess.piece_repr



.. definition:: chess.pieces



.. definition:: chess.pieces.decidable_eq



.. definition:: chess.white_bishop



.. definition:: chess.white_king



.. definition:: chess.white_knight



.. definition:: chess.white_pawn



.. definition:: chess.white_queen



.. definition:: chess.white_rook



``chess.playfield``
-------------------

.. module:: chess.playfield


.. definition:: matrix_to_playfield

    A conversion function to turn a bare `matrix` into a `playfield`.
    A `matrix` requires the dimensions to be finite.

    An example empty 3 × 3 playfield for 4 pieces could be generated by:

    .. code-block:: lean

        matrix_to_playfield ((
          ![![none, none, none],
            ![none, none, none],
            ![none, none, none]] : matrix (fin 3) (fin 3) (option (fin 4))


    where the positions are 0-indexed, with the origin in the top-left,
    first dimension for the row, and second dimension for the column
    (0,0) (0,1) (0,2)
    (1,0) (1,1) (1,2)
    (2,0) (2,1) (2,2)

.. definition:: playfield

    A `playfield m n ι` represents a `matrix (m × n) option ι`, which is
    a model for a `m × n` shaped game board where not every square is
    occupied.

.. definition:: playfield.has_mem

    A piece, identified by an index, is on the board, if there is any position
    such that the index at that position is the one we're inquiring about.
    Providing a `has_mem` instance allows using `ix ∈ pf` for `ix : ι, pf : playfield m n ι`.
    This definition does not preclude duplicated indices on the playfield.
    See "Implementation details".

.. definition:: playfield.inhabited

    A `playfield` is by default `inhabited` by empty squares everywhere.

.. definition:: playfield.matrix_repr

    For a `matrix` `ι^(m' × n')` where the `ι` has a `has_repr` instance itself,
    we can provide a `has_repr` for the matrix, using `vec_repr` for each of the rows of the matrix.
    This definition is used for displaying the playfield, when it is defined
    via a `matrix`, likely through notation.

    TODO: redefine using a fold + intercalate

.. definition:: playfield.matrix_repr_instance



.. definition:: playfield.move_piece

    Move an (optional) index from `start_square` to `end_square` on a `playfield`,
    swapping the indices at those squares.

    Does not assume anything about occupancy.

.. definition:: playfield.move_piece_def

    Equivalent to to `move_piece`, but useful for `rewrite`\ ing.

.. definition:: playfield.move_piece_diff

    Moving an (optional) index retains whatever (optional) indices were at other squares.

.. definition:: playfield.move_piece_end

    Moving an (optional) index that was at `end_square` places it at `start_square`

.. definition:: playfield.move_piece_start

    Moving an (optional) index that was at `start_square` places it at `end_square`

.. definition:: playfield.playfield_repr_instance



.. definition:: playfield.vec_repr

    For a "vector" `ι^n'` represented by the type `Π n' : ℕ, fin n' → ι`, where
    the `ι` has a `has_repr` instance itself, we can provide a `has_repr` for the "vector".
    This definition is used for displaying rows of the playfield, when it is defined
    via a `matrix`, likely through notation.

    TODO: redefine using a fold + intercalate

.. definition:: playfield.vec_repr_instance



``guarini``
-----------

.. module:: guarini


.. definition:: ending_position



.. definition:: first_move



.. definition:: guarini_position



.. definition:: guarini_seq



.. definition:: guarini_seq.scan_contents



.. definition:: starting_position



.. definition:: vector.scanl



.. definition:: vector.scanr


